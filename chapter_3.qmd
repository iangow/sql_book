# Time Series Analysis {#sec-time-series}

```{r}
#| message: false
library(DBI)
library(tidyverse)
library(dbplyr)
library(knitr)
```

```{r}
#| output: false
pg <- dbConnect(RPostgres::Postgres(), 
                bigint = "integer",
                check_interrupts = TRUE)
```

```{r}
#| include: false
dbExecute(pg, "SET search_path TO sql_book")
```

## Date, Datetime, and Time Manipulations

### Time Zone Conversions

@tanimura2021sql points out that often "timestamps in the database are not encoded with the time zone, and you will need to consult with the source or developer to figure out how your data was stored."
When pushing data to a PostgreSQL database, I use the `timestamp with time zone` type as much as possible.

@tanimura2021sql provides the following example, which is interesting because the west coast of the United States would not be on the PST time zone at that time of year.
Instead, it would be on PDT.

```{sql}
#| connection: pg
SELECT '2020-09-01 00:00:00' AT TIME ZONE 'pst';
```

```{sql}
#| connection: pg
SELECT '2020-09-01 00:00:00' AT TIME ZONE 'pdt';
```

I think most people barely know the difference between PST and PDT and even fewer would know the exact dates that one switches from one to the other.
A better approach is to use a time zone that encodes information about when PDT is used and when PST is used.
In PostgreSQL, the table `pg_timezone_names` has information that we need.

```{sql}
#| connection: pg
SELECT * 
FROM pg_timezone_names
WHERE name ~ '^US/';
```

```{sql}
#| connection: pg
SELECT * 
FROM pg_timezone_names
WHERE abbrev IN ('PDT', 'PST') 
ORDER BY name DESC
LIMIT 5;
```

The following two queries show that `US/Pacific` is sometimes `PDT` and sometimes `PST`.

```{sql}
#| connection: pg
SELECT 
    '2020-09-01 17:00:01 US/Pacific'::timestamptz AS t1,
    '2020-09-01 17:00:01 PDT'::timestamptz  AS t2;
```

```{sql}
#| connection: pg
SELECT 
    '2020-12-01 16:00:01 US/Pacific'::timestamptz AS t1,
    '2020-12-01 16:00:01 PST'::timestamptz  AS t2;
```

```{r}
sql <-
  "SELECT     
    '2020-12-01 16:00:01 US/Pacific'::timestamptz AS t1,
    '2020-12-01 16:00:01 PST'::timestamptz AS t2"

two_times <- tbl(pg, sql(sql))
two_times %>%
  kable()
```

```{r}
one_time <-
  two_times %>%
  select(t1) %>%
  pull()

print(one_time, tz = "UTC")
print(one_time, tz = "US/Pacific")
Sys.timezone()
print(one_time, tz = Sys.timezone())
```

The above examples illustrate a few key ideas.

First, while we supply the literal form `'2020-09-01 17:00:01 US/Pacific'::timestamptz`, it seems that once a variable has been encoded as `TIMESTAMP WITH TIME ZONE`, it behaves as though it is actually being *stored* as a timestamp in the UTC time zone, just with the *displayed* time perhaps being different.

Second, columns of type `TIMESTAMP WITH TIME ZONE` come into R with the associated time-zone information, which is what we want (especially if we will later put timestamp data back into PostgreSQL).

Third, we can see that we can choose to *display* information in a different time zone without changing the underlying data.

Some care is needed with timestamp data.
I think the `AT TIME ZONE` queries provided in @tanimura2021sql are actually pretty dangerous, as can be seen in the following query.
While we supply `2020-09-01 00:00:00` as UTC and then render it `AT TIME ZONE 'PDT'`, it turns out that the returned value is interpreted as a `TIMESTAMP WITHOUT TIME ZONE` and subsequent queries lead to confusing behaviour.
In the query below, the second application of `AT TIME ZONE` interprets the `TIMESTAMP WITHOUT TIME ZONE` as though it came from the stated time zone and the results seem to have `AT TIME ZONE` doing the opposite of what it did when given a `TIMESTAMP WITH TIME ZONE` (as in the initial literal `'2020-09-01 00:00:01 -0'`). 

```{sql}
#| connection: pg
WITH q1 AS
 (SELECT '2020-09-01 00:00:01 -0' AT TIME ZONE 'PDT' AS t1)
 
SELECT t1 AT TIME ZONE 'UTC' AS t2,
  to_char(t1, 'YYYY-MM-DD HH24:MI:SS TZ'),
  t1 AT TIME ZONE 'PDT' AS t3,
  t1 AT TIME ZONE 'Australia/Melbourne' AS t4,
  pg_typeof(t1)
FROM q1
```
It seems that `TIMESTAMP WITHOUT TIME ZONE` values should be converted to a time zone as quickly as possible to avoid confusion and that great care is needed with `AT TIME ZONE` given that it does very different things according to the supplied data type.

```{sql}
#| connection: pg
WITH q1 AS
 (SELECT '2020-09-01 00:00:01 -0'::timestamptz AS t1)
 
SELECT t1,
  to_char(t1, 'YYYY-MM-DD HH24:MI:SS TZ'),
  pg_typeof(t1)
FROM q1
```
Strange behaviour can result from values stored as `TIMESTAMP WITHOUT TIME ZONE`.
Below we see that `t1` is printed as UTC no matter what, while the behaviour of `t2` seems easier to understand.

```{r}
sql <-
  "SELECT     
    '2020-12-01 00:00:01-00' AS t1,
    '2020-12-01 00:00:01-00'::timestamptz AS t2"

two_times_notz <- tbl(pg, sql(sql))
two_times_notz %>% kable()
```

```{r}
two_times_notz_r <-
  collect(two_times_notz)
  
print(two_times_notz_r$t1)
Sys.timezone()
print(two_times_notz_r$t1, tz = Sys.timezone())

print(two_times_notz_r$t2)
Sys.timezone()
print(two_times_notz_r$t2, tz = Sys.timezone())
```


As pointed out by @tanimura2021sql, one drawback to storing information as UTC is that localtime information may be lost.
But it seems it would be more prudent to store information as `TIMESTAMP WITH TIME ZONE` and keep local time zone information as a separate column to avoid confusion.
For example, if the `orders` table is stored as `TIMESTAMP WITHOUT TIME ZONE` based on the local time of the customer, which might be `Australia/Melbourne` and the `shipping` table uses `TIMESTAMP WITH TIME ZONE`, then an analyst of time-to-ship data would be confused by orders apparently being shipped before they are made.
If `shipping` table uses `TIMESTAMP WITH TIME ZONE` using timestamps in the time zone of the East Bay warehouse (so `US/Pacific`), things would be even worse.

I think that fully fleshing out the issues here would require a separate chapter.
In fact, nothing in the core part of Chapter 3 of @tanimura2021sql (which focuses on the `retail_sales` table) really uses timestamp information, so we can put these issues aside for now.

### Date and Timestamp Format Conversions

As discussed in @tanimura2021sql, PostgreSQL has a rich array of functions for converting dates and times and extracting such information as months and days of the week.

```{sql}
#| connection: pg
SELECT date_trunc('month','2020-10-04 12:33:35 -00'::timestamptz);
```

One such function 

```{r}
a_time_df <- tbl(pg, sql("SELECT '2020-10-04 12:33:35'::timestamp AS a_time"))
a_time_df %>% 
  mutate(a_trunced_time = date_trunc('month', a_time))

a_time_df %>% 
  mutate(a_trunced_time = date_trunc('month', a_time)) %>%
  show_query()

a_time_df %>%
  collect()
```

### Date Math

### Time Math

```{r}
a_time_df <- tbl(pg, sql("SELECT '2020-10-04 12:33:35 US/Pacific'::timestamp with time zone AS a_time"))

a_time_df %>% 
  mutate(a_trunced_time = date_trunc('month', a_time)) 

a_time_df %>% 
  mutate(a_trunced_time = date_trunc('month', a_time)) %>%
  show_query()

a_time_df %>%
  collect()
```

```{r}
a_time_df %>%
  mutate(new_time = a_time + sql("interval '3 hours'")) %>%
  collect()
```

### Joining Data from Different Sources

## The Retail Sales Data Set

## Trending the Data

### Simple Trends

```{sql}
#| connection: pg
SELECT sales_month, sales
FROM retail_sales
WHERE kind_of_business = 'Retail and food services sales, total'
ORDER BY 1
```

```{r}
retail_sales <- tbl(pg, "retail_sales")
retail_sales %>%
  filter(kind_of_business == 'Retail and food services sales, total') %>%
  select(sales_month, sales) %>%
  arrange(sales_month) %>%
  ggplot(aes(x = sales_month, y = sales)) +
  geom_line()
```

```{sql}
#| connection: pg
SELECT date_part('year',sales_month) as sales_year,
    sum(sales) as sales
FROM retail_sales
WHERE kind_of_business = 'Retail and food services sales, total'
GROUP BY 1
;
```

```{r}
retail_sales %>%
  filter(kind_of_business == 'Retail and food services sales, total') %>%
  mutate(sales_year = date_part('year', sales_month)) %>%
  group_by(sales_year) %>%
  summarize(sales = sum(sales, na.rm = TRUE)) %>%
  arrange(sales_year) %>%
  ggplot(aes(x = sales_year, y = sales)) +
  geom_line()
```

```{sql}
#| connection: pg
SELECT date_part('year',sales_month) as sales_year, 
  kind_of_business, sum(sales) as sales
FROM retail_sales
WHERE kind_of_business IN 
          ('Book stores',
           'Sporting goods stores',
           'Hobby, toy, and game stores')
GROUP BY 1,2
ORDER BY 1;
```

### Comparing Components

```{r}
retail_sales %>%
  filter(kind_of_business %in% 
           c('Book stores',
             'Sporting goods stores',
             'Hobby, toy, and game stores')) %>%
  mutate(sales_year = date_part('year', sales_month)) %>%
  group_by(sales_year, kind_of_business) %>%
  summarize(sales = sum(sales, na.rm = TRUE), .groups = "drop") %>%
  arrange(sales_year) %>%
  ggplot(aes(x = sales_year, y = sales, color = kind_of_business)) +
  geom_line() +
  theme(legend.position = "top")
```

```{sql}
#| connection: pg
SELECT sales_month, kind_of_business, sales
FROM retail_sales
WHERE kind_of_business IN ('Men''s clothing stores','Women''s clothing stores')
ORDER BY 1,2;
```

```{r}
retail_sales %>%
  filter(kind_of_business %in% c("Men's clothing stores",
                                 "Women's clothing stores")) %>%
  select(sales_month, kind_of_business, sales) %>%
  arrange(sales_month) %>%
  ggplot(aes(x = sales_month, y = sales, color = kind_of_business)) +
  geom_line() +
  theme(legend.position = "top")
```

```{sql}
#| connection: pg
SELECT date_part('year',sales_month) as sales_year,
  kind_of_business, sum(sales) as sales
FROM retail_sales
WHERE kind_of_business IN 
        ('Men''s clothing stores',
        'Women''s clothing stores')
GROUP BY 1, 2
ORDER BY 1, 2;
```

```{r}
retail_sales %>%
  filter(kind_of_business %in% 
           c("Men's clothing stores",
             "Women's clothing stores")) %>%
  mutate(sales_year = date_part('year', sales_month)) %>%
  group_by(sales_year, kind_of_business) %>%
  summarize(sales = sum(sales, na.rm = TRUE), .groups = "drop") %>%
  arrange(sales_year) %>%
  ggplot(aes(x = sales_year, y = sales, color = kind_of_business)) +
  geom_line() +
  theme(legend.position = "top")
```

```{sql}
#| connection: pg
SELECT date_part('year', sales_month) AS sales_year,
  sum(CASE WHEN kind_of_business = 'Women''s clothing stores' 
          then sales 
          END) AS womens_sales,
  sum(CASE WHEN kind_of_business = 'Men''s clothing stores' 
          then sales 
          END) AS mens_sales
FROM retail_sales
WHERE kind_of_business IN 
   ('Men''s clothing stores',
    'Women''s clothing stores')
GROUP BY 1
ORDER BY 1;
```

```{r}
pivoted_sales <-
  retail_sales %>%
  filter(kind_of_business %in% 
           c("Men's clothing stores",
             "Women's clothing stores")) %>%
  mutate(kind_of_business = if_else(kind_of_business == "Women's clothing stores",
                                    "womens", "mens"),
         sales_year = date_part('year', sales_month)) %>%
  group_by(sales_year, kind_of_business) %>%
  summarize(sales = sum(sales, na.rm = TRUE), .groups = "drop") %>%
  pivot_wider(id_cols = "sales_year",
              names_from = "kind_of_business",
              names_glue = "{kind_of_business}_{.value}",
              values_from = "sales")  

pivoted_sales %>%
  show_query()

pivoted_sales %>%
  arrange(sales_year) %>%
  collect(n = 10) %>%
  knitr::kable()
```

```{r}
pivoted_sales %>%
  filter(sales_year <= 2019) %>%
  group_by(sales_year) %>%
  mutate(womens_minus_mens = womens_sales - mens_sales,
         mens_minus_womens = mens_sales - womens_sales) %>%
  select(sales_year, womens_minus_mens, mens_minus_womens) %>%
  arrange(sales_year) %>%
  ggplot(aes(y = womens_minus_mens, x = sales_year)) +
  geom_line()
```

```{r}
pivoted_sales %>%
  filter(sales_year <= 2019) %>%
  group_by(sales_year) %>%
  mutate(womens_times_of_mens = womens_sales / mens_sales) %>%
  arrange(sales_year) %>%
  ggplot(aes(y = womens_times_of_mens, x = sales_year)) +
  geom_line()
```
```{r}
pivoted_sales %>%
  filter(sales_year <= 2019) %>%
  group_by(sales_year) %>%
  mutate(womens_pct_of_mens = (womens_sales / mens_sales - 1) * 100) %>%
  arrange(sales_year) %>%
  ggplot(aes(y = womens_pct_of_mens, x = sales_year)) +
  geom_line()
```

### Percent of Total Calculations

```{r}
retail_sales %>%
  filter(kind_of_business %in% 
           c("Men's clothing stores",
             "Women's clothing stores")) %>%
  group_by(sales_month) %>%
  mutate(total_sales = sum(sales)) %>%
  ungroup() %>%
  mutate(pct_total_sales = sales * 100 / total_sales) %>%
  select(sales_month, kind_of_business, pct_total_sales) %>%
  collect(n = 3)
```

```{r}
retail_sales %>%
  filter(kind_of_business %in% 
           c("Men's clothing stores",
             "Women's clothing stores")) %>%
  group_by(sales_month) %>%
  mutate(total_sales = sum(sales)) %>%
  ungroup() %>%
  mutate(pct_total_sales = sales * 100 / total_sales) %>%
  show_query()
```

```{r}
retail_sales %>%
  filter(kind_of_business %in% 
           c("Men's clothing stores",
             "Women's clothing stores")) %>%
  group_by(sales_month) %>%
  mutate(total_sales = sum(sales)) %>%
  ungroup() %>%
  mutate(pct_total_sales = sales * 100 / total_sales) %>%
  ggplot(aes(y = pct_total_sales, x = sales_month, color = kind_of_business)) +
  geom_line()
```

### Indexing to See Percent Change over Time

```{r}
retail_sales %>%
  filter(kind_of_business == "Women's clothing stores") %>%
  mutate(sales_year = date_part('year',sales_month)) %>%
  group_by(sales_year) %>%
  summarize(sales = sum(sales, na.rm = TRUE)) %>%
  ungroup() %>%
  window_order(sales_year) %>%
  mutate(index_sales = first(sales),
         pct_from_index = (sales/index_sales - 1) * 100)
```

```{r}
retail_sales %>%
  filter(kind_of_business %in% c("Women's clothing stores",
                                 "Men's clothing stores"),
         sales_month <= '2019-12-31') %>%
  mutate(sales_year = date_part('year',sales_month)) %>%
  group_by(kind_of_business, sales_year) %>%
  summarize(sales = sum(sales, na.rm = TRUE), .groups = "drop") %>%
  group_by(kind_of_business) %>%
  window_order(sales_year) %>%
  mutate(index_sales = first(sales),
         pct_from_index = (sales/index_sales - 1) * 100) %>%
  ungroup() %>%
  ggplot(aes(y = pct_from_index, x = sales_year, color = kind_of_business)) +
  geom_line()
```

## Rolling Time Windows

### Calculating Rolling Time Windows

```{r}
mvg_avg <-
  retail_sales %>%
  filter(kind_of_business == "Women's clothing stores") %>%
  window_order(sales_month) %>%
  window_frame(-11, 0) %>%
  mutate(moving_avg = mean(sales, na.rm = TRUE),
         records_count = n()) %>%
  filter(sales_month >= '1993-01-01') 

mvg_avg %>%
  select(sales_month, moving_avg, records_count) %>%
  collect(n = 10) %>%
  kable(digits = 2)
```

```{r}
mvg_avg %>%
  ggplot(aes(x = sales_month)) +
  geom_line(aes(y = sales, colour = "Sales")) +
  geom_line(aes(y = moving_avg, colour = "Moving average")) 
```


```{sql}
#| connection: pg
SELECT 
  sales_month,
  avg(sales) over w AS moving_avg,
  count(sales) over w AS records_count
FROM retail_sales
WHERE kind_of_business = 'Women''s clothing stores'
WINDOW w AS (order by sales_month 
             rows between 11 preceding and current row)
```

```{r}
retail_sales %>%
  filter(kind_of_business == "Women's clothing stores") %>%
  window_order(sales_month) %>%
  window_frame(-11, 0) %>%
  mutate(moving_avg = mean(sales, na.rm = TRUE),
         records_count = n()) %>%
  select(sales_month, moving_avg, records_count) %>%
  collect(n = 10) %>%
  kable()
```

```{sql}
#| connection: pg
WITH jan_jul AS (
  SELECT sales_month, sales
  FROM retail_sales 
  WHERE kind_of_business = 'Women''s clothing stores'
     and date_part('month',sales_month) in (1,7))
     
SELECT a.date, b.sales_month, b.sales
FROM date_dim a
JOIN jan_jul b 
ON b.sales_month between a.date - interval '11 months' and a.date
WHERE a.date = a.first_day_of_month 
  and a.date between '1993-01-01' and '2020-12-01';
```
```{r}
date_dim <-
  tibble(date = seq(as.Date('1993-01-01'), 
                    as.Date('2020-12-01'), 
                    by = "1 month")) %>%
  copy_to(pg, ., overwrite = TRUE)

jan_jul <-
  retail_sales %>%
  filter(kind_of_business == "Women's clothing stores",
         month(sales_month) %in% c(1, 7)) %>%
  select(sales_month, sales)

date_dim %>%
  mutate(date_start = date - months(11)) %>%
  inner_join(jan_jul, 
             join_by(between(y$sales_month, x$date_start, x$date))) %>%
  select(date, sales_month, sales)
```

```{r}
date_dim %>%
  mutate(date_start = date - months(11)) %>%
  inner_join(jan_jul, 
             join_by(between(y$sales_month, x$date_start, x$date))) %>%
  group_by(date) %>%
  summarize(moving_avg = mean(sales, na.rm = TRUE),
            records = n())
```

```{sql}
#| connection: pg
WITH sales_months AS (
  SELECT distinct sales_month
  FROM retail_sales
  WHERE sales_month between '1993-01-01' and '2020-12-01')

SELECT a.sales_month, avg(b.sales) as moving_avg
FROM sales_months a
JOIN retail_sales b 
on b.sales_month between 
    a.sales_month - interval '11 months' and a.sales_month
  and b.kind_of_business = 'Women''s clothing stores' 
GROUP BY 1
ORDER BY 1
LIMIT 3;
```

```{r}
sales_months <-
  retail_sales %>%
  filter(between(sales_month, '1993-01-01', '2020-12-01')) %>%
  distinct(sales_month)

sales_months %>%
  mutate(month_start = sales_month - months(11)) %>%
  inner_join(retail_sales, 
             join_by(between(y$sales_month, x$month_start, x$sales_month)),
                     suffix = c("", "_y")) %>%
  filter(kind_of_business == "Women's clothing stores") %>%
  group_by(sales_month) %>%
  summarize(moving_avg = mean(sales, na.rm = TRUE)) %>%
  arrange(sales_month) %>%
  collect(n = 3) %>%
  kable()
``` 

### Calculating Cumulative Values

```{sql}
#| connection: pg
SELECT sales_month, sales,
  sum(sales) over w as sales_ytd
FROM retail_sales
WHERE kind_of_business = 'Women''s clothing stores'
WINDOW w AS (partition by date_part('year',sales_month) 
             order by sales_month)
LIMIT 3
```

```{r}
ytd_sales <-
  retail_sales %>%
  filter(kind_of_business == "Women's clothing stores") %>%
  mutate(year = year(sales_month)) %>%
  group_by(year) %>%
  window_order(sales_month) %>%
  mutate(sales_ytd = cumsum(sales)) %>%
  ungroup() %>%
  select(sales_month, sales, sales_ytd) 

ytd_sales %>%
  filter(month(sales_month) %in% c(1:3, 12)) %>%
  collect(n = 6) %>%
  kable()
```

```{r}
factor <- 40/4.5

ytd_sales %>%
  filter(year(sales_month) %in% 2016:2020) %>%
  ggplot(aes(x = sales_month, y = sales_ytd)) +
  geom_bar(stat = "identity") +
  geom_line(aes(y = sales * factor, colour = I("blue"))) +
  scale_y_continuous(
    "Sales YTD", 
    sec.axis = sec_axis(~ . / factor, name = "Monthly Sales")
  )
```
             
```{sql}
#| connection: pg
SELECT a.sales_month, a.sales
,sum(b.sales) as sales_ytd
FROM retail_sales a
JOIN retail_sales b on 
 date_part('year',a.sales_month) = date_part('year',b.sales_month)
 and b.sales_month <= a.sales_month
 and b.kind_of_business = 'Women''s clothing stores'
WHERE a.kind_of_business = 'Women''s clothing stores'
GROUP BY 1,2;
```

```{r}
retail_sales_yr <-
  retail_sales %>%
  mutate(year = year(sales_month))
  
retail_sales_yr %>%
  filter(kind_of_business == "Women's clothing stores") %>%
  inner_join(retail_sales_yr, 
             join_by(year, kind_of_business, sales_month >= sales_month),
             suffix = c("", "_y")) %>%
  group_by(sales_month, sales) %>%
  summarize(sales_ytd = sum(sales_y), .groups = "drop") %>%
  filter(month(sales_month) %in% c(1:3, 12)) %>%
  collect(n = 6) %>%
  kable()
```

## Analyzing with Seasonality

### Period-over-Period Comparisons: YoY and MoM

### Period-over-Period Comparisons: Same Month Versus Last Year

### Comparing to Multiple Prior Periods
