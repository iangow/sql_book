{
  "hash": "7a81b35680e8c83f72b37eed7d1a226d",
  "result": {
    "markdown": "# Preparing Data for Analysis\n\nChapter 2 of @tanimura2021sql provides a good foundation discussion of issues related to preparing data for analysis.\nWhile the discussion is couched in terms of SQL, in reality the issues are not specific to SQL or databases.\nFor this reason, I recommend that you read the chapter.\n\nWhile Chapter 2 of @tanimura2021sql contains many code snippets, few of these seem to be intended for users to run (in part because they assume a database set-up that users would not have).\nFor this reason, I do not attempt to provide `dplyr` equivalents to the code there except for a couple of exceptions that I discuss below.\n\n## Missing data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(DBI)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npg <- dbConnect(RPostgres::Postgres())\n\ndates_sql <-\n   \"SELECT * \n    FROM generate_series('2000-01-01'::timestamp,'2030-12-31', '1 day')\"\n\ndates <- \n  tbl(pg, sql(dates_sql)) %>%\n  rename(date = generate_series)\n\ndates_processed <-\n  dates %>%\n  mutate(date_key = as.integer(to_char(date, 'yyyymmdd')),\n         day_of_month = as.integer(date_part('day',date)),\n         day_of_year = as.integer(date_part('doy', date)),\n         day_of_week = as.integer(date_part('dow', date)),\n         day_name  = trim(to_char(date, 'Day')),\n         day_short_name = trim(to_char(date, 'Dy')),\n         week_number = as.integer(date_part('week', date)),\n         week_of_month = as.integer(to_char(date,'W')),\n         week = as.Date(date_trunc('week', date)),\n         month_number = as.integer(date_part('month',date)),\n         month_name = trim(to_char(date, 'Month')),\n         month_short_name = trim(to_char(date, 'Mon')),\n         first_day_of_month = as.Date(date_trunc('month', date)),\n         last_day_of_month = as.Date(date_trunc('month', date) +\n                                       sql(\"interval '1 month' -\n                                            interval '1 day'\")),\n         quarter_number = as.integer(date_part('quarter', date)),\n         quarter_name = trim('Q' %||% as.integer(date_part('quarter', date))),\n         first_day_of_quarter = as.Date(date_trunc('quarter', date)),\n         last_day_of_quarter = as.Date(date_trunc('quarter', date) + \n                                         sql(\"interval '3 months' -\n                                              interval '1 day'\")),\n         year = as.integer(date_part('year', date)),\n         decade = as.integer(date_part('decade', date)) * 10,\n         century = as.integer(date_part('century', date)))\n\ndates_processed %>%\n  collect(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 22\n   date                date_key day_of~1 day_o~2 day_o~3 day_n~4 day_s~5 week_~6\n   <dttm>                 <int>    <int>   <int>   <int> <chr>   <chr>     <int>\n 1 2000-01-01 00:00:00 20000101        1       1       6 Saturd~ Sat          52\n 2 2000-01-02 00:00:00 20000102        2       2       0 Sunday  Sun          52\n 3 2000-01-03 00:00:00 20000103        3       3       1 Monday  Mon           1\n 4 2000-01-04 00:00:00 20000104        4       4       2 Tuesday Tue           1\n 5 2000-01-05 00:00:00 20000105        5       5       3 Wednes~ Wed           1\n 6 2000-01-06 00:00:00 20000106        6       6       4 Thursd~ Thu           1\n 7 2000-01-07 00:00:00 20000107        7       7       5 Friday  Fri           1\n 8 2000-01-08 00:00:00 20000108        8       8       6 Saturd~ Sat           1\n 9 2000-01-09 00:00:00 20000109        9       9       0 Sunday  Sun           1\n10 2000-01-10 00:00:00 20000110       10      10       1 Monday  Mon           2\n# ... with 14 more variables: week_of_month <int>, week <date>,\n#   month_number <int>, month_name <chr>, month_short_name <chr>,\n#   first_day_of_month <date>, last_day_of_month <date>, quarter_number <int>,\n#   quarter_name <chr>, first_day_of_quarter <date>,\n#   last_day_of_quarter <date>, year <int>, decade <dbl>, century <int>, and\n#   abbreviated variable names 1: day_of_month, 2: day_of_year, 3: day_of_week,\n#   4: day_name, 5: day_short_name, 6: week_number\n```\n:::\n\n```{.r .cell-code}\ndates_processed %>%\n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\nSELECT\n  *,\n  CAST(to_char(\"date\", 'yyyymmdd') AS INTEGER) AS \"date_key\",\n  CAST(date_part('day', \"date\") AS INTEGER) AS \"day_of_month\",\n  CAST(date_part('doy', \"date\") AS INTEGER) AS \"day_of_year\",\n  CAST(date_part('dow', \"date\") AS INTEGER) AS \"day_of_week\",\n  trim(to_char(\"date\", 'Day')) AS \"day_name\",\n  trim(to_char(\"date\", 'Dy')) AS \"day_short_name\",\n  CAST(date_part('week', \"date\") AS INTEGER) AS \"week_number\",\n  CAST(to_char(\"date\", 'W') AS INTEGER) AS \"week_of_month\",\n  CAST(date_trunc('week', \"date\") AS DATE) AS \"week\",\n  CAST(date_part('month', \"date\") AS INTEGER) AS \"month_number\",\n  trim(to_char(\"date\", 'Month')) AS \"month_name\",\n  trim(to_char(\"date\", 'Mon')) AS \"month_short_name\",\n  CAST(date_trunc('month', \"date\") AS DATE) AS \"first_day_of_month\",\n  CAST(date_trunc('month', \"date\") + interval '1 month' -\n                                            interval '1 day' AS DATE) AS \"last_day_of_month\",\n  CAST(date_part('quarter', \"date\") AS INTEGER) AS \"quarter_number\",\n  trim('Q' || CAST(date_part('quarter', \"date\") AS INTEGER)) AS \"quarter_name\",\n  CAST(date_trunc('quarter', \"date\") AS DATE) AS \"first_day_of_quarter\",\n  CAST(date_trunc('quarter', \"date\") + interval '3 months' -\n                                              interval '1 day' AS DATE) AS \"last_day_of_quarter\",\n  CAST(date_part('year', \"date\") AS INTEGER) AS \"year\",\n  CAST(date_part('decade', \"date\") AS INTEGER) * 10.0 AS \"decade\",\n  CAST(date_part('century', \"date\") AS INTEGER) AS \"century\"\nFROM (\n  SELECT \"generate_series\" AS \"date\"\n  FROM (\nSELECT * \n    FROM generate_series('2000-01-01'::timestamp,'2030-12-31', '1 day')\n  ) \"q01\"\n) \"q02\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nctry_pops <-\n  tribble(\n  ~country, ~year_1980,  ~year_1990, ~year_2000, ~year_2010,\n  \"Canada\", 24593, 27791, 31100, 34207,\n  \"Mexico\", 68347, 84634, 99775, 114061,\n  \"United States\", 227225, 249623, 282162, 309326\n)\n\nctry_pops %>%\n  pivot_longer(cols = -country, \n               names_to = \"year\",\n               names_prefix = \"year_\",\n               values_ptypes = integer(),\n               values_to = \"population\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 3\n   country       year  population\n   <chr>         <chr>      <int>\n 1 Canada        1980       24593\n 2 Canada        1990       27791\n 3 Canada        2000       31100\n 4 Canada        2010       34207\n 5 Mexico        1980       68347\n 6 Mexico        1990       84634\n 7 Mexico        2000       99775\n 8 Mexico        2010      114061\n 9 United States 1980      227225\n10 United States 1990      249623\n11 United States 2000      282162\n12 United States 2010      309326\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nctry_pops_db <- copy_to(pg, ctry_pops)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nctry_pops_db %>%\n  pivot_longer(cols = -country, \n               names_to = \"year\",\n               names_prefix = \"year_\",\n               values_to = \"population\") %>%\n  show_query()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQL>\n(\n  (\n    (\n      SELECT \"country\", '1980' AS \"year\", \"year_1980\" AS \"population\"\n      FROM \"ctry_pops\"\n    )\n    UNION ALL\n    (\n      SELECT \"country\", '1990' AS \"year\", \"year_1990\" AS \"population\"\n      FROM \"ctry_pops\"\n    )\n  )\n  UNION ALL\n  (\n    SELECT \"country\", '2000' AS \"year\", \"year_2000\" AS \"population\"\n    FROM \"ctry_pops\"\n  )\n)\nUNION ALL\n(\n  SELECT \"country\", '2010' AS \"year\", \"year_2010\" AS \"population\"\n  FROM \"ctry_pops\"\n)\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}